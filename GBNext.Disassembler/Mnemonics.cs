using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GBNext.Disassembler
{
    public class Mnemonics
    {
        public static Mnemonic Mnemonic(byte opcode)
        {
            switch (opcode)
            {
                case 0x00: return new Mnemonic() { Text = "NOP" };
                case 0x01: return new Mnemonic() { Text = "LD BC,nn", ExtraOpcodes = 2 };
                case 0x02: return new Mnemonic() { Text = "LD (BC),A" };
                case 0x03: return new Mnemonic() { Text = "INC BC" };
                case 0x04: return new Mnemonic() { Text = "INC B" };
                case 0x05: return new Mnemonic() { Text = "DEC B" };
                case 0x06: return new Mnemonic() { Text = "LD B,n", ExtraOpcodes = 1 };
                case 0x07: return new Mnemonic() { Text = "RLCA" };
                case 0x08: return new Mnemonic() { Text = "LD (nn),SP", ExtraOpcodes = 2 };
                case 0x09: return new Mnemonic() { Text = "ADD HL,BC" };
                case 0x0A: return new Mnemonic() { Text = "LD A,(BC)" };
                case 11: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x0C: return new Mnemonic() { Text = "INC C" };
                case 0x0D: return new Mnemonic() { Text = "DEC C" };
                case 0x0E: return new Mnemonic() { Text = "LD C,n", ExtraOpcodes = 1 };
                case 15: return new Mnemonic() { Text = "UNKNOWN" };
                case 16: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x11: return new Mnemonic() { Text = "LD DE,nn", ExtraOpcodes = 2 };
                case 0x12: return new Mnemonic() { Text = "LD (DE),A" };
                case 0x13: return new Mnemonic() { Text = "INC DE" };
                case 0x14: return new Mnemonic() { Text = "INC D" };
                case 0x15: return new Mnemonic() { Text = "DEC D" };
                case 0x16: return new Mnemonic() { Text = "LD D,n", ExtraOpcodes = 1 };
                case 23: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x18: return new Mnemonic() { Text = "JR n", ExtraOpcodes = 1 };
                case 0x19: return new Mnemonic() { Text = "ADD HL,DE" };
                case 0x1A: return new Mnemonic() { Text = "LD A,(DE)" };
                case 27: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x1C: return new Mnemonic() { Text = "INC E" };
                case 0x1D: return new Mnemonic() { Text = "DEC E" };
                case 0x1E: return new Mnemonic() { Text = "LD E,n", ExtraOpcodes = 1 };
                case 31: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x20: return new Mnemonic() { Text = "JR NZ,n", ExtraOpcodes = 1 };
                case 0x21: return new Mnemonic() { Text = "LD HL,nn", ExtraOpcodes = 2 };
                case 0x22: return new Mnemonic() { Text = "LDI (HL),A" };
                case 0x23: return new Mnemonic() { Text = "INC HL" };
                case 0x24: return new Mnemonic() { Text = "INC H" };
                case 0x25: return new Mnemonic() { Text = "DEC H" };
                case 0x26: return new Mnemonic() { Text = "LD H,n", ExtraOpcodes = 1 };
                case 39: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x28: return new Mnemonic() { Text = "JR Z,n", ExtraOpcodes = 1 };
                case 0x29: return new Mnemonic() { Text = "ADD HL,HL" };
                case 0x2A: return new Mnemonic() { Text = "LDI A,(HL)" };
                case 43: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x2C: return new Mnemonic() { Text = "INC L" };
                case 0x2D: return new Mnemonic() { Text = "DEC L" };
                case 0x2E: return new Mnemonic() { Text = "LD L,n", ExtraOpcodes = 1 };
                case 47: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x30: return new Mnemonic() { Text = "JR NC,n", ExtraOpcodes = 1 };
                case 0x31: return new Mnemonic() { Text = "LD SP,nn", ExtraOpcodes = 2 };
                case 0x32: return new Mnemonic() { Text = "LD (HL),A" };
                case 0x33: return new Mnemonic() { Text = "INC SP" };
                case 0x34: return new Mnemonic() { Text = "INC (HL)" };
                case 0x35: return new Mnemonic() { Text = "DEC (HL)" };
                case 0x36: return new Mnemonic() { Text = "LD (HL),n", ExtraOpcodes = 1 };
                case 0x37: return new Mnemonic() { Text = "SCF" };
                case 0x38: return new Mnemonic() { Text = "JR C,n", ExtraOpcodes = 1 };
                case 0x39: return new Mnemonic() { Text = "ADD HL,SP" };
                case 0x3A: return new Mnemonic() { Text = "LDD A,(HL)" };
                case 59: return new Mnemonic() { Text = "UNKNOWN" };
                case 0x3C: return new Mnemonic() { Text = "INC A" };
                case 0x3D: return new Mnemonic() { Text = "DEC A" };
                case 0x3E: return new Mnemonic() { Text = "LD A,n", ExtraOpcodes = 1 };
                case 0X3F: return new Mnemonic() { Text = "CCF" };
                case 0x40: return new Mnemonic() { Text = "LD B,B" };
                case 0x41: return new Mnemonic() { Text = "LD B,C" };
                case 0x42: return new Mnemonic() { Text = "LD B,D" };
                case 0x43: return new Mnemonic() { Text = "LD B,E" };
                case 0x44: return new Mnemonic() { Text = "LD B,H" };
                case 0x45: return new Mnemonic() { Text = "LD B,L" };
                case 0x46: return new Mnemonic() { Text = "LD B,(HL)" };
                case 0x47: return new Mnemonic() { Text = "LD B,A" };
                case 0x48: return new Mnemonic() { Text = "LD C,B" };
                case 0x49: return new Mnemonic() { Text = "LD C,C" };
                case 0x4A: return new Mnemonic() { Text = "LD C,D" };
                case 0x4B: return new Mnemonic() { Text = "LD C,E" };
                case 0x4C: return new Mnemonic() { Text = "LD C,H" };
                case 0x4D: return new Mnemonic() { Text = "LD C,L" };
                case 0x4E: return new Mnemonic() { Text = "LD C,(HL)" };
                case 0x4F: return new Mnemonic() { Text = "LD C,A" };
                case 0x50: return new Mnemonic() { Text = "LD D,B" };
                case 0x51: return new Mnemonic() { Text = "LD D,C" };
                case 0x52: return new Mnemonic() { Text = "LD D,D" };
                case 0x53: return new Mnemonic() { Text = "LD D,E" };
                case 0x54: return new Mnemonic() { Text = "LD D,H" };
                case 0x55: return new Mnemonic() { Text = "LD D,L" };
                case 0x56: return new Mnemonic() { Text = "LD D,(HL)" };
                case 0x57: return new Mnemonic() { Text = "LD D,A" };
                case 0x58: return new Mnemonic() { Text = "LD E,B" };
                case 0x59: return new Mnemonic() { Text = "LD E,C" };
                case 0x5A: return new Mnemonic() { Text = "LD E,D" };
                case 0x5B: return new Mnemonic() { Text = "LD E,E" };
                case 0x5C: return new Mnemonic() { Text = "LD E,H" };
                case 0x5D: return new Mnemonic() { Text = "LD E,L" };
                case 0x5E: return new Mnemonic() { Text = "LD E,(HL)" };
                case 0x5F: return new Mnemonic() { Text = "LD E,A" };
                case 0x60: return new Mnemonic() { Text = "LD H,B" };
                case 0x61: return new Mnemonic() { Text = "LD H,C" };
                case 0x62: return new Mnemonic() { Text = "LD H,D" };
                case 0x63: return new Mnemonic() { Text = "LD H,E" };
                case 0x64: return new Mnemonic() { Text = "LD H,H" };
                case 0x65: return new Mnemonic() { Text = "LD H,L" };
                case 0x66: return new Mnemonic() { Text = "LD H,(HL)" };
                case 0x67: return new Mnemonic() { Text = "LD H,A" };
                case 0x68: return new Mnemonic() { Text = "LD L,B" };
                case 0x69: return new Mnemonic() { Text = "LD L,C" };
                case 0x6A: return new Mnemonic() { Text = "LD L,D" };
                case 0x6B: return new Mnemonic() { Text = "LD L,E" };
                case 0x6C: return new Mnemonic() { Text = "LD L,H" };
                case 0x6D: return new Mnemonic() { Text = "LD L,L" };
                case 0x6E: return new Mnemonic() { Text = "LD L,(HL)" };
                case 0x6F: return new Mnemonic() { Text = "LD L,A" };
                case 0x70: return new Mnemonic() { Text = "LD (HL),B" };
                case 0x71: return new Mnemonic() { Text = "LD (HL),C" };
                case 0x72: return new Mnemonic() { Text = "LD (HL),D" };
                case 0x73: return new Mnemonic() { Text = "LD (HL),E" };
                case 0x74: return new Mnemonic() { Text = "LD (HL),H" };
                case 0x75: return new Mnemonic() { Text = "LD (HL),L" };
                case 0x76: return new Mnemonic() { Text = "HALT" };
                case 0x77: return new Mnemonic() { Text = "LD (HL),A" };
                case 0x78: return new Mnemonic() { Text = "LD A,B" };
                case 0x79: return new Mnemonic() { Text = "LD A,C" };
                case 0x7A: return new Mnemonic() { Text = "LD A,D" };
                case 0x7B: return new Mnemonic() { Text = "LD A,E" };
                case 0x7C: return new Mnemonic() { Text = "LD A,H" };
                case 0x7D: return new Mnemonic() { Text = "LD A,L" };
                case 0x7E: return new Mnemonic() { Text = "LD A,(HL)" };
                case 0x7F: return new Mnemonic() { Text = "LD A,A" };
                case 0x80: return new Mnemonic() { Text = "ADD A,B" };
                case 0x81: return new Mnemonic() { Text = "ADD A,C" };
                case 0x82: return new Mnemonic() { Text = "ADD A,D" };
                case 0x83: return new Mnemonic() { Text = "ADD A,E" };
                case 0x84: return new Mnemonic() { Text = "ADD A,H" };
                case 0x85: return new Mnemonic() { Text = "ADD A,L" };
                case 0x86: return new Mnemonic() { Text = "ADD A,(HL)" };
                case 0x87: return new Mnemonic() { Text = "ADD A,A" };
                case 0x88: return new Mnemonic() { Text = "ADC A,B" };
                case 0x89: return new Mnemonic() { Text = "ADC A,C" };
                case 0x8A: return new Mnemonic() { Text = "ADC A,D" };
                case 0x8B: return new Mnemonic() { Text = "ADC A,E" };
                case 0x8C: return new Mnemonic() { Text = "ADC A,H" };
                case 0x8D: return new Mnemonic() { Text = "ADC A,L" };
                case 0x8E: return new Mnemonic() { Text = "ADC A,(HL)" };
                case 0x8F: return new Mnemonic() { Text = "ADC A,A" };
                case 0x90: return new Mnemonic() { Text = "SUB B" };
                case 0x91: return new Mnemonic() { Text = "SUB C" };
                case 0x92: return new Mnemonic() { Text = "SUB D" };
                case 0x93: return new Mnemonic() { Text = "SUB E" };
                case 0x94: return new Mnemonic() { Text = "SUB H" };
                case 0x95: return new Mnemonic() { Text = "SUB L" };
                case 0x96: return new Mnemonic() { Text = "SUB (HL)" };
                case 0x97: return new Mnemonic() { Text = "SUB A" };
                case 0x98: return new Mnemonic() { Text = "SBC A,B" };
                case 0x99: return new Mnemonic() { Text = "SBC A,C" };
                case 0x9A: return new Mnemonic() { Text = "SBC A,D" };
                case 0x9B: return new Mnemonic() { Text = "SBC A,E" };
                case 0x9C: return new Mnemonic() { Text = "SBC A,H" };
                case 0x9D: return new Mnemonic() { Text = "SBC A,L" };
                case 0x9E: return new Mnemonic() { Text = "SBC A,(HL)" };
                case 0x9F: return new Mnemonic() { Text = "SBC A,A" };
                case 0xA0: return new Mnemonic() { Text = "AND B" };
                case 0xA1: return new Mnemonic() { Text = "AND C" };
                case 0xA2: return new Mnemonic() { Text = "AND D" };
                case 0xA3: return new Mnemonic() { Text = "AND E" };
                case 0xA4: return new Mnemonic() { Text = "AND H" };
                case 0xA5: return new Mnemonic() { Text = "AND L" };
                case 0xA6: return new Mnemonic() { Text = "AND (HL)" };
                case 0xA7: return new Mnemonic() { Text = "AND A" };
                case 0xA8: return new Mnemonic() { Text = "XOR B" };
                case 0xA9: return new Mnemonic() { Text = "XOR C" };
                case 0xAA: return new Mnemonic() { Text = "XOR D" };
                case 0xAB: return new Mnemonic() { Text = "XOR E" };
                case 0xAC: return new Mnemonic() { Text = "XOR H" };
                case 0xAD: return new Mnemonic() { Text = "XOR L" };
                case 0xAE: return new Mnemonic() { Text = "XOR (HL)" };
                case 0xAF: return new Mnemonic() { Text = "XOR A" };
                case 0xB0: return new Mnemonic() { Text = "OR B" };
                case 0xB1: return new Mnemonic() { Text = "OR C" };
                case 0xB2: return new Mnemonic() { Text = "OR D" };
                case 0xB3: return new Mnemonic() { Text = "OR E" };
                case 0xB4: return new Mnemonic() { Text = "OR H" };
                case 0xB5: return new Mnemonic() { Text = "OR L" };
                case 0xB6: return new Mnemonic() { Text = "OR (HL)" };
                case 0xB7: return new Mnemonic() { Text = "OR A" };
                case 0xB8: return new Mnemonic() { Text = "CP B" };
                case 0xB9: return new Mnemonic() { Text = "CP C" };
                case 0xBA: return new Mnemonic() { Text = "CP D" };
                case 0xBB: return new Mnemonic() { Text = "CP E" };
                case 0xBC: return new Mnemonic() { Text = "CP H" };
                case 0xBD: return new Mnemonic() { Text = "CP L" };
                case 0xBE: return new Mnemonic() { Text = "CP (HL)" };
                case 0xBF: return new Mnemonic() { Text = "CP A" };
                case 0xC0: return new Mnemonic() { Text = "RET NZ" };
                case 193: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xC2: return new Mnemonic() { Text = "JP NZ,nn", ExtraOpcodes = 2 };
                case 0xC3: return new Mnemonic() { Text = "JP nn", ExtraOpcodes = 2 };
                case 0xC4: return new Mnemonic() { Text = "CALL NZ,nn", ExtraOpcodes = 2 };
                case 197: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xC6: return new Mnemonic() { Text = "ADD A,n", ExtraOpcodes = 1 };
                case 0xC7: return new Mnemonic() { Text = "RST 0x00" };
                case 0xC8: return new Mnemonic() { Text = "RET Z" };
                case 0xC9: return new Mnemonic() { Text = "RET" };
                case 0xCA: return new Mnemonic() { Text = "JP Z,nn", ExtraOpcodes = 2 };
                case 0xCB: return new Mnemonic() { Text = "EXTENSION OPCODE" };
                case 0xCC: return new Mnemonic() { Text = "CALL Z,nn", ExtraOpcodes = 2 };
                case 0xCD: return new Mnemonic() { Text = "CALL" };
                case 0xCE: return new Mnemonic() { Text = "ADC A,n", ExtraOpcodes = 1 };
                case 0xCF: return new Mnemonic() { Text = "RST 0x08" };
                case 0xD0: return new Mnemonic() { Text = "RET NC" };
                case 209: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xD2: return new Mnemonic() { Text = "JP NC,nn", ExtraOpcodes = 2 };
                case 211: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xD4: return new Mnemonic() { Text = "CALL NC,nn", ExtraOpcodes = 2 };
                case 213: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xD6: return new Mnemonic() { Text = "SUB n", ExtraOpcodes = 1 };
                case 0xD7: return new Mnemonic() { Text = "RST 0x10" };
                case 0xD8: return new Mnemonic() { Text = "RET C" };
                case 0xD9: return new Mnemonic() { Text = "RETI" };
                case 0xDA: return new Mnemonic() { Text = "JP C,nn", ExtraOpcodes = 2 };
                case 219: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xDC: return new Mnemonic() { Text = "CALL C,nn", ExtraOpcodes = 2 };
                case 221: return new Mnemonic() { Text = "UNKNOWN" };
                case 222: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xDF: return new Mnemonic() { Text = "RST 0x18" };
                case 0xE0: return new Mnemonic() { Text = "LDH (n),A", ExtraOpcodes = 1 };
                case 225: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xE2: return new Mnemonic() { Text = "LD (C),A" };
                case 227: return new Mnemonic() { Text = "UNKNOWN" };
                case 228: return new Mnemonic() { Text = "UNKNOWN" };
                case 229: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xE6: return new Mnemonic() { Text = "AND n", ExtraOpcodes = 1 };
                case 0xE7: return new Mnemonic() { Text = "RST 0x20" };
                case 0xE8: return new Mnemonic() { Text = "ADD SP,n", ExtraOpcodes = 1 };
                case 0xE9: return new Mnemonic() { Text = "JP (HL)" };
                case 0xEA: return new Mnemonic() { Text = "LD (nn),A", ExtraOpcodes = 2 };
                case 235: return new Mnemonic() { Text = "UNKNOWN" };
                case 236: return new Mnemonic() { Text = "UNKNOWN" };
                case 237: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xEE: return new Mnemonic() { Text = "XOR n", ExtraOpcodes = 1 };
                case 0xEF: return new Mnemonic() { Text = "RST 0x28" };
                case 0xF0: return new Mnemonic() { Text = "LDH A,n", ExtraOpcodes = 1 };
                case 241: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xF2: return new Mnemonic() { Text = "LD A,(C)" };
                case 0xF3: return new Mnemonic() { Text = "DI" };
                case 244: return new Mnemonic() { Text = "UNKNOWN" };
                case 245: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xF6: return new Mnemonic() { Text = "OR n", ExtraOpcodes = 1 };
                case 0xF7: return new Mnemonic() { Text = "RST 0x30" };
                case 0xF8: return new Mnemonic() { Text = "LDHL SP,n", ExtraOpcodes = 1 };
                case 0xF9: return new Mnemonic() { Text = "LD SP,HL" };
                case 0xFA: return new Mnemonic() { Text = "LD A,nn", ExtraOpcodes = 2 };
                case 0xFB: return new Mnemonic() { Text = "EI" };
                case 252: return new Mnemonic() { Text = "UNKNOWN" };
                case 253: return new Mnemonic() { Text = "UNKNOWN" };
                case 0xFE: return new Mnemonic() { Text = "CP n", ExtraOpcodes = 1 };
            }
            return new Mnemonic() { Text = "UNKNOWN" };
        }
    }
}
